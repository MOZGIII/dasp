initSidebarItems({"fn":[["equilibrium","Provides an iterator that endlessly yields `Frame`s of type `F` at equilibrium."],["from_interleaved_samples_iter","Create a new `Signal` from the given `Frame`-yielding `Iterator`."],["from_iter","Create a new `Signal` from the given `Frame`-yielding `Iterator`."],["from_slice","Create a new `Signal` from the given slice of `Frame`s."],["gen","A signal that generates frames using the given function."],["gen_mut","A signal that generates frames using the given function which may mutate some state."],["noise","Produces a `Signal` that yields random values between -1.0..1.0."],["noise_simplex","Produces a 1-dimensional simplex noise `Signal`."],["phase","Creates a `Phase` that continuously steps forward by the given `step` size yielder."],["rate","Creates a frame `Rate` (aka sample rate) representing the rate at which a signal may be sampled."],["saw","Produces a `Signal` that yields a saw wave oscillating at the given hz."],["sine","Produces a `Signal` that yields a sine wave oscillating at the given hz."],["square","Produces a `Signal` that yields a square wave oscillating at the given hz."]],"struct":[["AddAmp","An iterator that yields the sum of the frames yielded by both `other` and `self` in lock-step."],["Bus","A type which allows for `send`ing a single `Signal` to multiple outputs."],["ClipAmp","Clips samples in each frame yielded by `signal` to the given threshhold amplitude."],["ConstHz","A constant phase step size."],["Delay","Delays the `signal` by the given number of frames."],["Equilibrium","An iterator that endlessly yields `Frame`s of type `F` at equilibrium."],["FromInterleavedSamplesIterator","An iterator that converts an iterator of `Sample`s to an iterator of `Frame`s."],["FromIterator","A type that wraps an Iterator and provides a `Signal` implementation for it."],["Gen","A signal that generates frames using the given function."],["GenMut","A signal that generates frames using the given function which may mutate some state."],["Hz","An iterator that yields the step size for a phase."],["IntoInterleavedSamples","Converts a `Signal` to a type that yields the individual interleaved samples."],["IntoInterleavedSamplesIterator","Converts the `IntoInterleavedSamples` into an `Iterator` that always returns `Some`."],["MulAmp","An iterator that yields the product of the frames yielded by both `other` and `self` in lock-step."],["MulHz","Multiplies the rate at which frames of `self` are yielded by the given `signal`."],["Noise","A noise signal generator."],["NoiseSimplex","A 1D simplex-noise generator."],["OffsetAmp","Provides an iterator that offsets the amplitude of every channel in each frame of the signal by some sample value and yields the resulting frames."],["OffsetAmpPerChannel","An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes in each channel of the given `amp` `Frame`."],["Output","An output node to which some signal `S` is `Output`ing its frames."],["Phase","An iterator that yields a phase, useful for waveforms like Sine or Saw."],["Rate","The rate at which phrase a Signal is sampled."],["Saw","A saw wave signal generator."],["ScaleAmp","An `Iterator` that scales the amplitude of the sample of each channel in every `Frame` yielded by `self` by the given amplitude."],["ScaleAmpPerChannel","An `Iterator` that scales the amplitude of every `Frame` in `self` by the respective amplitudes in each channel of the given `amp` `Frame`."],["Sine","A sine wave signal generator."],["Square","A square wave signal generator."],["Take","An iterator that yields `n` number of `Frame`s from the inner `signal`."]],"trait":[["Signal","Types that yield `Frame`s as a multi-channel PCM signal."],["Step","Types that may be used to give a phase step size based on some `hz / sample rate`."]]});